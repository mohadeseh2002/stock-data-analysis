# -*- coding: utf-8 -*-
"""final.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1KvamiJc-sFYdzFPgm0kIj-1Lfz4QyUlp
"""

!pip install yfinance seaborn scikit-learn matplotlib

import yfinance as yf
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt

from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import MinMaxScaler

plt.style.use('seaborn-v0_8-whitegrid')

df = yf.download("AAPL", start="2018-01-01", end="2023-12-31")
df.head()

# baresi maghadir gom shode
print(df.isnull().sum())

# hazf radif hayi k maghadire gom shode darand
df.dropna(inplace=True)

# tabdil tarikh be datetime index
df.index = pd.to_datetime(df.index)

scaler = MinMaxScaler()
scaled_data = scaler.fit_transform(df[['Open', 'High', 'Low', 'Close', 'Volume']])
scaled_df = pd.DataFrame(scaled_data, columns=['Open', 'High', 'Low', 'Close', 'Volume'], index=df.index)

# 1. ravand gheimat payani
df['Close'].plot(figsize=(12,4), title='ravand gheimat payani  ')

# 2. tozi gheimat payani
plt.figure(figsize=(8,4))
sns.histplot(df['Close'], bins=50, kde=True)
plt.title("Histogram -  tozi gheimat payani")
plt.show()

# 3. Boxplot baraye outliers
plt.figure(figsize=(10,5))
sns.boxplot(data=df[['Open', 'High', 'Low', 'Close', 'Volume']])
plt.title("Boxplot - dadeh haye part")
plt.show()

# 4. Heatmap hambastegui
plt.figure(figsize=(8,6))
sns.heatmap(df.corr(), annot=True, cmap='coolwarm')
plt.title("Heatmap - hambastegi bein vizhegi ha")
plt.show()

# 5. miangin moteharek
df['MA20'] = df['Close'].rolling(window=20).mean()
df['MA50'] = df['Close'].rolling(window=50).mean()
df[['Close', 'MA20', 'MA50']].plot(figsize=(12,4), title='Moving Averages')
plt.show()

X = scaled_df[['Open', 'High', 'Low', 'Volume']]
y = scaled_df['Close']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, shuffle=False)

from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score
import numpy as np

lr_model = LinearRegression()
lr_model.fit(X_train, y_train)
lr_pred = lr_model.predict(X_test)
lr_mae = mean_absolute_error(y_test, lr_pred)
lr_rmse = np.sqrt(mean_squared_error(y_test, lr_pred))
lr_r2 = r2_score(y_test, lr_pred)

print("Linear Regression")
print(f"MAE: {lr_mae:.4f}")
print(f"RMSE: {lr_rmse:.4f}")
print(f"R² Score: {lr_r2:.4f}")

# nemodare moghayese
plt.figure(figsize=(12,5))
plt.plot(y_test.index, y_test, label=' gheimat vaghei', linewidth=2)
plt.plot(y_test.index, lr_pred, label='pishbini Linear Regression', linewidth=2)
plt.title("Linear Regression: pishbini va gheimat vaghei")
plt.xlabel("tarikh")
plt.ylabel("gheimat normal shode")
plt.legend()
plt.grid(True)
plt.show()

from sklearn.tree import DecisionTreeRegressor

dt_model = DecisionTreeRegressor()
dt_model.fit(X_train, y_train)
dt_pred = dt_model.predict(X_test)
dt_mae = mean_absolute_error(y_test, dt_pred)
dt_rmse = np.sqrt(mean_squared_error(y_test, dt_pred))
dt_r2 = r2_score(y_test, dt_pred)

print("Decision Tree")
print(f"MAE: {dt_mae:.4f}")
print(f"RMSE: {dt_rmse:.4f}")
print(f"R² Score: {dt_r2:.4f}")

plt.figure(figsize=(12,5))
plt.plot(y_test.index, y_test, label=' gheimat vaghei', linewidth=2)
plt.plot(y_test.index, dt_pred, label='pishbini Decision Tree', linewidth=2)
plt.title("Decision Tree: pishbini va gheimat vaghei")
plt.xlabel("tarikh")
plt.ylabel("gheimat normal shode")
plt.legend()
plt.grid(True)
plt.show()

from sklearn.ensemble import RandomForestRegressor

rf_model = RandomForestRegressor(n_estimators=100)
rf_model.fit(X_train, y_train)
rf_pred = rf_model.predict(X_test)
rf_mae = mean_absolute_error(y_test, rf_pred)
rf_rmse = np.sqrt(mean_squared_error(y_test, rf_pred))
rf_r2 = r2_score(y_test, rf_pred)

print("Random Forest")
print(f"MAE: {rf_mae:.4f}")
print(f"RMSE: {rf_rmse:.4f}")
print(f"R² Score: {rf_r2:.4f}")

plt.figure(figsize=(12,5))
plt.plot(y_test.index, y_test, label='gheimat vaghei ', linewidth=2)
plt.plot(y_test.index, rf_pred, label='pishbini Random Forest', linewidth=2)
plt.title("Random Forest: pishbini va gheimat vaghei")
plt.xlabel("tarikh")
plt.ylabel("gheimat normal shode")
plt.legend()
plt.grid(True)
plt.show()

from sklearn.neighbors import KNeighborsRegressor
knn_model = KNeighborsRegressor()
knn_model.fit(X_train, y_train)
knn_pred = knn_model.predict(X_test)
knn_mae = mean_absolute_error(y_test, knn_pred)
knn_rmse = np.sqrt(mean_squared_error(y_test, knn_pred))
knn_r2 = r2_score(y_test, knn_pred)

print("KNN")
print(f"MAE: {knn_mae:.4f}")
print(f"RMSE: {knn_rmse:.4f}")
print(f"R² Score: {knn_r2:.4f}")

plt.figure(figsize=(12,5))
plt.plot(y_test.index, y_test, label=' gheimat vaghei', linewidth=2)
plt.plot(y_test.index, knn_pred, label='pishbini KNN', linewidth=2)
plt.title("KNN: pishbini va gheimat vaghei")
plt.xlabel("tarikh")
plt.ylabel("gheimat normal shode")
plt.legend()
plt.grid(True)
plt.show()

from sklearn.svm import SVR

svr_model = SVR()
svr_model.fit(X_train, y_train)
svr_pred = svr_model.predict(X_test)
svr_mae = mean_absolute_error(y_test, svr_pred)
svr_rmse = np.sqrt(mean_squared_error(y_test, svr_pred))
svr_r2 = r2_score(y_test, svr_pred)

print("SVR")
print(f"MAE: {svr_mae:.4f}")
print(f"RMSE: {svr_rmse:.4f}")
print(f"R² Score: {svr_r2:.4f}")

plt.figure(figsize=(12,5))
plt.plot(y_test.index, y_test, label=' gheimat vaghei', linewidth=2)
plt.plot(y_test.index, svr_pred, label='pishbini SVR', linewidth=2)
plt.title("SVR: pishbini va gheimat vaghei")
plt.xlabel("tarikh")
plt.ylabel("gheimat normal shode")
plt.legend()
plt.grid(True)
plt.show()

comparison_df = pd.DataFrame({ 'Model': ['Linear Regression', 'Decision Tree', 'Random Forest', 'KNN', 'SVR'],
                              'MAE': [lr_mae, dt_mae, rf_mae, knn_mae, svr_mae],
                              'RMSE': [lr_rmse, dt_rmse, rf_rmse, knn_rmse, svr_rmse],
                               'R² Score': [lr_r2, dt_r2, rf_r2, knn_r2, svr_r2]
                               })

comparison_df = comparison_df.sort_values(by='R² Score', ascending=False)
print(" moghayese amalkarde model ha:")
print(comparison_df)

plt.figure(figsize=(10,6))
sns.barplot(data=comparison_df, x='R² Score', y='Model', palette='viridis')
plt.title("moghayese deghat model (R² Score)")
plt.xlabel("R² Score")
plt.ylabel("model")
plt.grid(True)
plt.show()